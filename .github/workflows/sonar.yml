name: CI - SonarCloud, Tests, NuGet y Release

env:
  DOTNET_VERSION: '9.x'
  SONAR_ORG: 'dennisdhm7'
  SONAR_PROJECT: 'dennisdhm7_apibank'
  PACKAGE_VERSION: '1.0.0'
  NUGET_SOURCE_NAME: 'github'
  NUGET_SOURCE_URL: 'https://nuget.pkg.github.com/UPT-FAING-EPIS/index.json'

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build-test-sonar-pack-publish:
    name: Build, Test, Sonar y Publicación de NuGet
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Java (para SonarScanner)
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore (NuGet)
        run: dotnet restore Bank/Bank.sln

      - name: Instalar SonarScanner
        run: dotnet tool install -g dotnet-sonarscanner

      - name: Build, Test y SonarCloud
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          dotnet-sonarscanner begin \
            /k:"${{ env.SONAR_PROJECT }}" \
            /o:"${{ env.SONAR_ORG }}" \
            /d:sonar.login="${{ secrets.SONAR_TOKEN }}" \
            /d:sonar.host.url="https://sonarcloud.io" \
            /d:sonar.cs.opencover.reportsPaths="**/TestResults/**/coverage.opencover.xml" \
            /d:sonar.qualitygate.wait=false \
            /d:sonar.scanner.skipJreProvisioning=true
          
          dotnet build Bank/Bank.sln --no-incremental --no-restore
          dotnet test Bank/Bank.sln --no-build --collect:"XPlat Code Coverage;Format=opencover"
          dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"

      - name: Empaquetar (dotnet pack)
        run: dotnet pack Bank/Bank.Domain/Bank.Domain.csproj -c Release -o out /p:Version=1.0.0

      - name: Agregar fuente GitHub Packages
        run: dotnet nuget add source ${{ env.NUGET_SOURCE_URL }} --name ${{ env.NUGET_SOURCE_NAME }} --username ${{ github.actor }} --password ${{ secrets.PAT_TOKEN }} --store-password-in-clear-text

      - name: Publicar paquete en GitHub Packages
        run: dotnet nuget push out/*.nupkg --api-key ${{ secrets.PAT_TOKEN }} --source ${{ env.NUGET_SOURCE_NAME }} --skip-duplicate

  create-release:
    name: Crear Release v1.0.0 con notas de commits
    needs: build-test-sonar-pack-publish
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout (con historial completo)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Crear tag v1.0.0 si no existe
        shell: bash
        run: |
          if ! git rev-parse -q --verify "refs/tags/v1.0.0"; then
            git tag v1.0.0
            git push origin v1.0.0
          fi

      - name: Crear Release v1.0.0 (notas automáticas) y adjuntar .nupkg
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v1.0.0
          name: v1.0.0
          generate_release_notes: true
          files: |
            out/*.nupkg
        env:
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}